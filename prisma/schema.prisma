datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]    @relation("ownerPost")
  Save          Save[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  tags        String[]
  detination  String
  image       String
  createdAt   DateTime  @default(now()) @map("created_at")
  ownerPostId String    @db.ObjectId
  ownerPost   User      @relation("ownerPost", fields: [ownerPostId], references: [id])
  Comment     Comment[]
  Save        Save[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
}

model Save {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  accountId String   @db.ObjectId
  account   User     @relation(fields: [accountId], references: [id])
}
